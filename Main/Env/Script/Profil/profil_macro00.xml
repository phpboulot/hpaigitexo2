<?xml version="1.0" encoding="UTF-8" ?>
<project name="carrot2.common.readme">
  <!--
      Appends build information at the end of a readme.txt file.
    -->
  <macrodef name="carrot2.common.readme.process">
    <attribute name="readme.dest" />
    <attribute name="readme.src" />
    <attribute name="buildinfo.src" />
    <element name="filters" />

    <sequential>
      <mkdir dir="${carrot2.master.basedir}/tmp/readme" />
      <concat destfile="${carrot2.master.basedir}/tmp/readme/readme.txt">
        <fileset file="@{readme.src}" />
        <fileset file="@{buildinfo.src}" />
      </concat>

      <tstamp>
        <format property="build.date" pattern="yyyy-MM-dd HH:mm:ss" />
        <format property="current.year" pattern="yyyy" />
      </tstamp>
      
      <exec executable="git" dir="${carrot2.master.basedir}" 
            outputproperty="git.verhash"
            failonerror="false"
            failifexecutionfails="false"
            vmlauncher="false">
            <arg line="log -1 --pretty=format:%H" />
      </exec>

      <property name="git.verhash" value="[unset]" />
      <property name="build.key" value="[unset]" />
      <property name="build.number" value="[unset]" />
      <property name="build.date" value="[unset]" />
      <property name="user.name" value="[unset]" />
      <property name="current.year" value="[unset]" />
      
      <copy file="${carrot2.master.basedir}/tmp/readme/readme.txt" tofile="@{readme.dest}" 
            filtering="yes" overwrite="true">
        <filterset>
          <filter token="build.key" value="${build.key}" />
          <filter token="build.number" value="${build.number}" />
          <filter token="build.date" value="${build.date}" />
          <filter token="user.name" value="${user.name}" />
          <filter token="current.year" value="${current.year}" />
          <filters />
        </filterset>
      </copy>

      <delete dir="${carrot2.master.basedir}/tmp/readme" />
    </sequential>
  </macrodef>

      <macrodef name="my.echo">
      <attribute name="text"/>
      <sequential>
        <echo message="@{text}"/>
      </sequential>
    </macrodef>

<macrodef name="git">
	<attribute name="command" />
	<attribute name="dir" default="" />
	<element name="args" optional="true" />
	<sequential>
		<echo message="git @{command} on dir @{dir}" />
		<exec executable="git" dir="@{dir}">
			<arg value="@{command}" />
			<args/>
		</exec>
	</sequential>
</macrodef>


<!-- gesterr -->
  <macrodef name="basedir-check">
    <attribute name="main-basedir"  />
    <attribute name="internal-basedir"  />
    
    <sequential>
      <condition property="basedir.fail">
        <equals arg1="@{main-basedir}" arg2="@{internal-basedir}" />
      </condition>
      <ant target="common.basedir.message" />
    </sequential>
  </macrodef>

  <target name="common.basedir.message" if="basedir.fail">
    <echo>
    run this internal script located in the main checkout dir
    </echo>
    <!--
    <fail message="Please invoke the same target from the main build script" />
    -->
  </target>
  </project>